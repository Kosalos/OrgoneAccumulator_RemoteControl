void settings()
{
  size(WINDOWXS, WINDOWYS);
}

private int xp, yp;
final int MIN_RANGE_GAP = 200;

void setup() 
{
  surface.setTitle("Algorhyithmic Music");

  cp = new InCVPacket(); 
  fontSmall = createFont("Arial", 14, true);
  fontLarge = createFont("Arial", 20, true);

  selectSerialPort();

  // band sliders -------------------------------------------------
  int xp = GRP_X + 25;
  int yp = GRP_Y + 10;

  for (int i=0; i<NUM_BAND; ++i) 
    setupBandSlidersforRow(i);

  // evolve ---------------------------------
  int ey = BAND_Y+NUM_BAND*(BAND_YS + BAND_YHOP);
  widget.addFrame(0, BAND_X, ey, BAND_XS, BAND_YS); // frame
  widget.addCheck(EVOLVECHECK_ID, EVOLVE_X+55, ey+5, 17, 17, BAND_X_HOP-17, NUM_BAND_VALUE-1);

  widget.addToggle(EVOLVEMASTER_ID, WINDOWXS - 100, ey+3, 80, 20, "Evolve (E)"); 

  // range ---------------------------------
  for (int i=0; i<NUM_BAND; ++i) {
    widget.addText(CVRANGE_ID+i, 20, GRP_Y + 11 + i*23, 105, 20, "");
    widget.w[widget.getIndex(CVRANGE_ID+i)].justify = 0;
  }

  // buttons --------------------------
  final int ytop = 36;
  int x = 360;
  int y = ytop;

  widget.addToggle(SENDGATE_ID, x, y, 120, 20, "Send Gate (G)");  
  y += 25;
  widget.addToggle(REPEAT_ID, x, y, 120, 20, "Rnd Repeat");  
  y += 25;
  widget.addToggle(PACE_ID, x, y, 120, 20, "Rnd Pace"); 
  y += 25;
  widget.addButton(RANDOMIZE_ID, x, y, 120, 20, "Randomize (R,T)"); 

  x = WINDOWXS-130; 
  y = ytop;
  widget.addButton(LOADSESSION_ID, x, y, 120, 20, "Load Session (L)");  
  y += 25;
  widget.addButton(SAVESESSION_ID, x, y, 120, 20, "Save Session (S)"); 
  y += 25;
  widget.addToggle(PAUSE_ID, x, y, 120, 20, "Pause (P)");  
  y += 25;
  widget.addButton(HELP_ID, x, y, 120, 20, "Help (H)"); 

  // music controls --------------------
  String[] pName = { "A", "B", "C", "D", "E", "", "", "" };
  xp = 10;
  yp = ytop;
  for (int i=0; i<MAX_EQUATION_PARAM; ++i) {
    if (i > 4) xp = -100;
    String s = "Param " + nf(i+1, 1);
    widget.addSlider(EQUATIONPARAM_ID + i, xp, yp, BAND_SLIDER_XS, 15, 0, 15, pName[i]);
    if (i <= 4) 
      widget.w[widget.count-1].showValue = true;
    yp += 20;
  }

  xp = 150;
  yp = ytop;
  widget.addSlider(SPEED_ID, xp, yp, BAND_SLIDER_XS, 15, 1, 500, "Speed (Q,W)");
  yp += 20;
  widget.addSlider(MODULO_ID, xp, yp, BAND_SLIDER_XS, 15, 1, 1024, "Modulo");
  yp += 20;
  widget.addSlider(RANGELOW_ID, xp, yp, BAND_SLIDER_XS, 15, 1, 8191-MIN_RANGE_GAP, "Range Low");
  yp += 20;
  widget.addSlider(RANGEHIGH_ID, xp, yp, BAND_SLIDER_XS, 15, MIN_RANGE_GAP, 8191, "Range High");
  yp += 20;
  widget.addSlider(SMOOTHING_ID, xp, yp, BAND_SLIDER_XS, 15, 0, 50, "Smoothing");

  widget.initialize();
}

// ==========================================================

void setupBandSlider(int index, int baseID) {
  widget.addSlider(index * BASE_ID_PER_ROW + baseID, xp, yp, BAND_SLIDER_XS, 18, CV_MIN, CV_MAX, "");
  xp += BAND_X_HOP;
}

void setupBandSlidersforRow(int index) {
  xp = 40;
  yp = BAND_Y+6 + index * (BAND_YS + BAND_YHOP);

  widget.addFrame(index * BASE_ID_PER_ROW + FRAME_ID, BAND_X, BAND_Y+index*(BAND_YS + BAND_YHOP), BAND_XS, BAND_YS); // frame

  widget.addSlider(index * BASE_ID_PER_ROW + 0, -10, -10, 10, 10, CV_MIN, CV_MAX, "");

  setupBandSlider(index, OFFSET_ID);
  setupBandSlider(index, WAVE1_ID);
  setupBandSlider(index, WAVE2_ID);
  setupBandSlider(index, WAVE3_ID);
  setupBandSlider(index, POSITION_ID);
  setupBandSlider(index, EFFECT_ID);
  setupBandSlider(index, INDEX_ID);
  setupBandSlider(index, FREQ_ID);
  setupBandSlider(index, MOD_ID);

  int id = index * BASE_ID_PER_ROW + CBOX_ID1;
  widget.addToggle(id++, xp, yp, 18, 18, ""); 
  xp += 35; // checkboxes
  widget.addToggle(id++, xp, yp, 18, 18, ""); 
  xp += 35;
  widget.addToggle(id++, xp, yp, 18, 18, ""); 
  xp += 35;

  widget.addText(id++, 15, yp, 18, 18, nf(index+1, 1)); // legend
}

// ==================================================================

void showHelp() {
  String t = 
    "Algorhyithmic Music for the OA  (Orgone Accumulator)\n\n" +
    "Eight Bands are provided, each with a bank of controls for the OA's parameters.\n\n" +
    "Which Band is heard is controlled by the CV (control voltage) generated by the music algorithm.\n" +
    "The CV voltage ranges from 0 .. 8191, and each band is alloted a section of that range.\n\n" +
    "You specify the ranges by left mouse click/drag on the graphic rendition.\n" +
    "You can also right click/drag a range on the graph, and all the bands will divide it up equally.\n\n" +
    "The music algorithm is controlled by 5 parameters labelled A - E.\n" + 
    "Additional controls: \n" +
    "  Speed: the rate at which the algorithm is executed.\n" +
    "  Modulo: the raw output of the algorithm is truncated by this modulo value.\n" +
    "  Range Low,High: the output is offset and scaled to fall within this range of voltages.\n" +
    "  Smoothing: the output is runnning-average filtered by this amount.\n\n" +
    "  Send Gate: whether a Trigger signal is sent every time the alrogithm cycles.\n" +
    "             OA Drum mode (prime/Sel #7) requires trigger pulses.\n" +
    "  Rnd Repeat: whether the algorithm should occasionally repeat iself.\n" +
    "  Rnd Pace: whether the algorithm shound occasionally alter it's speed for a awhile.\n\n" +
    "Randomize (R):\n" +
    "    Randomize all Band settings.  Press 'T' to randomize the Music settings.\n\n" +
    "Load/Save Patch (L,S):\n" +
    "    Settings are stored to file in the same folder as the app.\n\n" +
    "Evolve:  (E)\n" +
    "    Whether random changes are made to the settings during play.\n" +
    "    Master On/Off switch, and 'enable' switches for each slider.\n\n" +
    "Filter:\n" +
    "    Widgets smoothing of CV voltage received from OA.\n\n" +
    "Note:  Press '1' through '8' to copy that band's settings to the other rows.\n\n" +
    "Note:  Right mouse button click/drag on the graphic panel to define a CV range.\n" +
    "       All the bands will adjust their CV setting to equally share that region.\n" +
    "Note:  Right click/drag on a band slider to affect all the slders in the column.\n\n" +
    "Note:  The history graph displays two lines:\n" +
    "       The RED line is the raw algorithm output.\n" +
    "       The WHITE line is the raw output after being offset by the active band's CV offset.\n" +
    "       This is the value sent to the OA.";

  showMessageDialog(null, t, "Help", PLAIN_MESSAGE);
}
